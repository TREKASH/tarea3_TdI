{"ast":null,"code":"var _jsxFileName = \"/Users/trekash/Desktop/tarea-3-TREKASH/my-frontend/src/components/Chatbot.js\",\n  _s = $RefreshSig$();\n// src/components/Chatbot.js\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = 'http://localhost:8000'; // Cambia a la URL de tu API\n\nfunction Chatbot() {\n  _s();\n  const [messages, setMessages] = useState([]); // Almacena el historial de mensajes\n  const [input, setInput] = useState(''); // Almacena el mensaje del usuario\n\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n\n    // Añadir el mensaje del usuario al historial\n    setMessages([...messages, {\n      text: input,\n      sender: 'user'\n    }]);\n    try {\n      // Solicitud a la API con el mensaje del usuario\n      const response = await axios.post(`${API_URL}/chatbot`, {\n        query: input\n      });\n      setMessages(prevMessages => [...prevMessages, {\n        text: response.data.answer,\n        sender: 'bot'\n      }]);\n    } catch (error) {\n      console.error(\"Error al obtener la respuesta:\", error);\n      setMessages(prevMessages => [...prevMessages, {\n        text: \"Error al obtener respuesta\",\n        sender: 'bot'\n      }]);\n    }\n    setInput(''); // Limpiar el campo de entrada\n  };\n  const handleInputChange = e => {\n    setInput(e.target.value);\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      sendMessage();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-messages\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.sender}`,\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: msg.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 25\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: input,\n      onChange: handleInputChange,\n      onKeyPress: handleKeyPress,\n      placeholder: \"Escribe tu mensaje...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendMessage,\n      children: \"Enviar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n}\n_s(Chatbot, \"HDAtGPGcvWga1zf1TBXg51T+tsc=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","API_URL","Chatbot","_s","messages","setMessages","input","setInput","sendMessage","trim","text","sender","response","post","query","prevMessages","data","answer","error","console","handleInputChange","e","target","value","handleKeyPress","key","className","children","map","msg","index","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","onKeyPress","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/trekash/Desktop/tarea-3-TREKASH/my-frontend/src/components/Chatbot.js"],"sourcesContent":["// src/components/Chatbot.js\nimport React, { useState } from 'react';\nimport axios from 'axios';\n\n\nconst API_URL = 'http://localhost:8000';  // Cambia a la URL de tu API\n\nfunction Chatbot() {\n    const [messages, setMessages] = useState([]);  // Almacena el historial de mensajes\n    const [input, setInput] = useState('');  // Almacena el mensaje del usuario\n\n    const sendMessage = async () => {\n        if (!input.trim()) return;\n\n        // Añadir el mensaje del usuario al historial\n        setMessages([...messages, { text: input, sender: 'user' }]);\n        \n        try {\n            // Solicitud a la API con el mensaje del usuario\n            const response = await axios.post(`${API_URL}/chatbot`, { query: input });\n            setMessages((prevMessages) => [\n                ...prevMessages,\n                { text: response.data.answer, sender: 'bot' }\n            ]);\n        } catch (error) {\n            console.error(\"Error al obtener la respuesta:\", error);\n            setMessages((prevMessages) => [\n                ...prevMessages,\n                { text: \"Error al obtener respuesta\", sender: 'bot' }\n            ]);\n        }\n        \n        setInput('');  // Limpiar el campo de entrada\n    };\n\n    const handleInputChange = (e) => {\n        setInput(e.target.value);\n    };\n\n    const handleKeyPress = (e) => {\n        if (e.key === 'Enter') {\n            sendMessage();\n        }\n    };\n\n    return (\n        <div className=\"chatbot\">\n            <div className=\"chatbot-messages\">\n                {messages.map((msg, index) => (\n                    <div key={index} className={`message ${msg.sender}`}>\n                        <span>{msg.text}</span>\n                    </div>\n                ))}\n            </div>\n            <input\n                type=\"text\"\n                value={input}\n                onChange={handleInputChange}\n                onKeyPress={handleKeyPress}\n                placeholder=\"Escribe tu mensaje...\"\n            />\n            <button onClick={sendMessage}>Enviar</button>\n        </div>\n    );\n}\n\nexport default Chatbot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}